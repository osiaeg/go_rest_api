openapi: 3.0.3
info:
  title: OpenAPI 3.0
  contact:
    email: egor.gonchrov.osia@mail.ru
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.11
servers:
  - url: http://localhost:8080
tags:
  - name: actor
    description: Everything about actors
  - name: film
    description: Everything about films
paths:
  /actor:
    put:
      tags:
        - actor
      summary: Update an existing actor
      description: Update an existing actor by Id
      operationId: updateActor
      requestBody:
        description: Update an existent actor in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Actor'
        required: true
      responses:
        '200':
          description: Successful operation
        '400':
          description: Invalid ID supplied
        '404':
          description: Pet not found
        '422':
          description: Validation exception
    post:
      tags:
        - actor
      summary: Add a new actor
      description: Add a new actor
      operationId: addActor
      requestBody:
        description: Create a new pet in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ActorWithoutId'
        required: true
      responses:
        '200':
          description: Successful operation
        '400':
          description: Invalid input
        '422':
          description: Validation exception
    get:
      tags:
        - actor
      summary: Get all actors with list of film
      description: Get all actors with list of film
      operationId: GetAllActors
      responses:
        '200':
          description: Successful operation
        '400':
          description: Invalid input
        '422':
          description: Validation exception
  /actor/{actor_id}:
    delete:
      tags:
        - actor
      summary: Delete actor by ID
      description: Returns a single pet
      operationId: deleteActorById
      parameters:
        - name: actor_id
          in: path
          description: ID of actor to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
        '400':
          description: Invalid ID supplied
        '404':
          description: Pet not found
  /film:
    post:
      tags:
        - film
      summary: Add a new film
      description: Add a new film
      operationId: addFilm
      requestBody:
        description: Create a new pet in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FilmWithoutId'
        required: true
      responses:
        '200':
          description: Successful operation
        '400':
          description: Invalid input
        '422':
          description: Validation exception
    put:
      tags:
        - film
      summary: Update an existing film
      description: Update an existing film by Id
      operationId: updateFilm
      requestBody:
        description: Update an existent film in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Film'
        required: true
      responses:
        '200':
          description: Successful operation
        '400':
          description: Invalid ID supplied
        '404':
          description: Pet not found
        '422':
          description: Validation exception  
  /films:
    get:
      tags:
        - film
      summary: Get all film sorted by rating desc
      description: Get all film sorted by rating desc
      operationId: getAllFilms
      responses:
        '200':
          description: Successful operation
        '400':
          description: Invalid input
        '422':
          description: Validation exception
  /film/{film_id}:
    delete:
      tags:
        - film
      summary: Delete Film by ID
      description: None
      operationId: deleteFilmById
      parameters:
        - name: film_id
          in: path
          description: ID of film to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
        '400':
          description: Invalid ID supplied
        '404':
          description: Pet not found
  /films_sort_by/{field_name}/{order}:
    get:
      tags:
       - film
      summary: Delete Film by ID
      description: None
      operationId: getSortedFilms
      parameters:
        - name: field_name
          in: path
          description: ID of film to delete
          required: true
          schema:
            type: string
            example: film_rating
        - name: order
          in: path
          description: ID of film to delete
          required: true
          schema:
            type: string
            example: asc/desc
      responses:
        '200':
          description: successful operation
        '400':
          description: Invalid ID supplied
        '404':
          description: Pet not found
  /search_film/by_film_name/{part_of_name}:
    get:
      tags:
       - film
      summary: Search Film by part_of_name
      description: None
      operationId: searchFilm
      parameters:
        - name: part_of_name
          in: path
          description: ID of film to delete
          required: true
          schema:
            type: string
            example: film_rating
      responses:
        '200':
          description: successful operation
        '400':
          description: Invalid ID supplied
        '404':
          description: Pet not found
components:
  schemas:
    Film:
      required:
        - film_id
        - film_name
        - film_description
        - film_release_date
        - film_rating
        - film_actor_list
      type: object
      properties:
        film_id:
          type: integer
          example: 10
        film_name:
          type: string
          example: "The Green Mile"
        film_description:
          type: string
          example: "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua."
        film_release_date:
          type: string
          pattern: '^\d{4}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])$'
          example: "2017-03-14"
        film_rating:
          type: integer
          example: 5
        film_actor_list:
          type: array
          items:
            type: integer
          example: [1, 3, 5]
    FilmWithoutId:
      required:
          - film_id
          - film_name
          - film_description
          - film_release_date
          - film_rating
          - film_actor_list
      type: object
      properties:
        film_name:
          type: string
          example: "The Green Mile"
        film_description:
          type: string
          example: "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua."
        film_release_date:
          type: string
          pattern: '^\d{4}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])$'
          example: "2017-03-14"
        film_rating:
          type: integer
          example: 5
        film_actor_list:
          type: array
          items:
            type: integer
          example: [1, 3, 5]
    Actor:
      required:
        - actor_id
        - actor_name
        - actor_sex
        - actor_birthday
      type: object
      properties:
        actor_id:
          type: integer
          example: 10
        actor_name:
          type: string
          example: Daniel Jacob Radcliffe
        actor_sex:
          type: string
          example: M
        actor_birthday:
          type: string
          pattern: '^\d{4}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])$'
          example: "2017-03-14"
    ActorWithoutId:
      required:
          - actor_name
          - actor_sex
          - actor_birthday
      type: object
      properties:
        actor_name:
          type: string
          example: Daniel Jacob Radcliffe
        actor_sex:
          type: string
          example: M
        actor_birthday:
          type: string
          pattern: '^\d{4}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])$'
          example: "2017-03-14"